// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nugget/app/protoapi/control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fprotoapi_2fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fprotoapi_2fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nugget_2fapp_2fprotoapi_2fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nugget_2fapp_2fprotoapi_2fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nugget_2fapp_2fprotoapi_2fcontrol_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_nugget_2fapp_2fprotoapi_2fcontrol_2eproto_metadata_getter(int index);
namespace nugget {
namespace app {
namespace protoapi {
class ControlRequest;
struct ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
class Notice;
struct NoticeDefaultTypeInternal;
extern NoticeDefaultTypeInternal _Notice_default_instance_;
}  // namespace protoapi
}  // namespace app
}  // namespace nugget
PROTOBUF_NAMESPACE_OPEN
template<> ::nugget::app::protoapi::ControlRequest* Arena::CreateMaybeMessage<::nugget::app::protoapi::ControlRequest>(Arena*);
template<> ::nugget::app::protoapi::Notice* Arena::CreateMaybeMessage<::nugget::app::protoapi::Notice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nugget {
namespace app {
namespace protoapi {

enum NoticeCode : int {
  NO_ERROR = 0,
  PING = 1,
  PONG = 2,
  MESSAGE_LOST = 3,
  GENERIC_ERROR = 4,
  UNRECOGNIZED_MESSAGE = 5,
  DECODE_ERROR = 6,
  ENCODE_ERROR = 7,
  NoticeCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NoticeCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NoticeCode_IsValid(int value);
constexpr NoticeCode NoticeCode_MIN = NO_ERROR;
constexpr NoticeCode NoticeCode_MAX = ENCODE_ERROR;
constexpr int NoticeCode_ARRAYSIZE = NoticeCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoticeCode_descriptor();
template<typename T>
inline const std::string& NoticeCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NoticeCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NoticeCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NoticeCode_descriptor(), enum_t_value);
}
inline bool NoticeCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NoticeCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NoticeCode>(
    NoticeCode_descriptor(), name, value);
}
enum ControlRequestType : int {
  CRT_RESERVED = 0,
  REVERT_TO_CONSOLE = 1,
  ControlRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlRequestType_IsValid(int value);
constexpr ControlRequestType ControlRequestType_MIN = CRT_RESERVED;
constexpr ControlRequestType ControlRequestType_MAX = REVERT_TO_CONSOLE;
constexpr int ControlRequestType_ARRAYSIZE = ControlRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlRequestType_descriptor();
template<typename T>
inline const std::string& ControlRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlRequestType_descriptor(), enum_t_value);
}
inline bool ControlRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlRequestType>(
    ControlRequestType_descriptor(), name, value);
}
// ===================================================================

class Notice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.protoapi.Notice) */ {
 public:
  inline Notice() : Notice(nullptr) {}
  virtual ~Notice();
  explicit constexpr Notice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notice(const Notice& from);
  Notice(Notice&& from) noexcept
    : Notice() {
    *this = ::std::move(from);
  }

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notice& operator=(Notice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notice* internal_default_instance() {
    return reinterpret_cast<const Notice*>(
               &_Notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Notice& a, Notice& b) {
    a.Swap(&b);
  }
  inline void Swap(Notice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notice* New() const final {
    return CreateMaybeMessage<Notice>(nullptr);
  }

  Notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.protoapi.Notice";
  }
  protected:
  explicit Notice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fprotoapi_2fcontrol_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeMessageFieldNumber = 2,
    kNoticeCodeFieldNumber = 1,
  };
  // string notice_message = 2;
  void clear_notice_message();
  const std::string& notice_message() const;
  void set_notice_message(const std::string& value);
  void set_notice_message(std::string&& value);
  void set_notice_message(const char* value);
  void set_notice_message(const char* value, size_t size);
  std::string* mutable_notice_message();
  std::string* release_notice_message();
  void set_allocated_notice_message(std::string* notice_message);
  private:
  const std::string& _internal_notice_message() const;
  void _internal_set_notice_message(const std::string& value);
  std::string* _internal_mutable_notice_message();
  public:

  // .nugget.app.protoapi.NoticeCode notice_code = 1;
  void clear_notice_code();
  ::nugget::app::protoapi::NoticeCode notice_code() const;
  void set_notice_code(::nugget::app::protoapi::NoticeCode value);
  private:
  ::nugget::app::protoapi::NoticeCode _internal_notice_code() const;
  void _internal_set_notice_code(::nugget::app::protoapi::NoticeCode value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.protoapi.Notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_message_;
  int notice_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fprotoapi_2fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ControlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.protoapi.ControlRequest) */ {
 public:
  inline ControlRequest() : ControlRequest(nullptr) {}
  virtual ~ControlRequest();
  explicit constexpr ControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlRequest(const ControlRequest& from);
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlRequest* New() const final {
    return CreateMaybeMessage<ControlRequest>(nullptr);
  }

  ControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlRequest& from);
  void MergeFrom(const ControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.protoapi.ControlRequest";
  }
  protected:
  explicit ControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fprotoapi_2fcontrol_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .nugget.app.protoapi.ControlRequestType type = 1;
  void clear_type();
  ::nugget::app::protoapi::ControlRequestType type() const;
  void set_type(::nugget::app::protoapi::ControlRequestType value);
  private:
  ::nugget::app::protoapi::ControlRequestType _internal_type() const;
  void _internal_set_type(::nugget::app::protoapi::ControlRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.protoapi.ControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fprotoapi_2fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notice

// .nugget.app.protoapi.NoticeCode notice_code = 1;
inline void Notice::clear_notice_code() {
  notice_code_ = 0;
}
inline ::nugget::app::protoapi::NoticeCode Notice::_internal_notice_code() const {
  return static_cast< ::nugget::app::protoapi::NoticeCode >(notice_code_);
}
inline ::nugget::app::protoapi::NoticeCode Notice::notice_code() const {
  // @@protoc_insertion_point(field_get:nugget.app.protoapi.Notice.notice_code)
  return _internal_notice_code();
}
inline void Notice::_internal_set_notice_code(::nugget::app::protoapi::NoticeCode value) {
  
  notice_code_ = value;
}
inline void Notice::set_notice_code(::nugget::app::protoapi::NoticeCode value) {
  _internal_set_notice_code(value);
  // @@protoc_insertion_point(field_set:nugget.app.protoapi.Notice.notice_code)
}

// string notice_message = 2;
inline void Notice::clear_notice_message() {
  notice_message_.ClearToEmpty();
}
inline const std::string& Notice::notice_message() const {
  // @@protoc_insertion_point(field_get:nugget.app.protoapi.Notice.notice_message)
  return _internal_notice_message();
}
inline void Notice::set_notice_message(const std::string& value) {
  _internal_set_notice_message(value);
  // @@protoc_insertion_point(field_set:nugget.app.protoapi.Notice.notice_message)
}
inline std::string* Notice::mutable_notice_message() {
  // @@protoc_insertion_point(field_mutable:nugget.app.protoapi.Notice.notice_message)
  return _internal_mutable_notice_message();
}
inline const std::string& Notice::_internal_notice_message() const {
  return notice_message_.Get();
}
inline void Notice::_internal_set_notice_message(const std::string& value) {
  
  notice_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Notice::set_notice_message(std::string&& value) {
  
  notice_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.protoapi.Notice.notice_message)
}
inline void Notice::set_notice_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notice_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.protoapi.Notice.notice_message)
}
inline void Notice::set_notice_message(const char* value,
    size_t size) {
  
  notice_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.protoapi.Notice.notice_message)
}
inline std::string* Notice::_internal_mutable_notice_message() {
  
  return notice_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Notice::release_notice_message() {
  // @@protoc_insertion_point(field_release:nugget.app.protoapi.Notice.notice_message)
  return notice_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notice::set_allocated_notice_message(std::string* notice_message) {
  if (notice_message != nullptr) {
    
  } else {
    
  }
  notice_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.protoapi.Notice.notice_message)
}

// -------------------------------------------------------------------

// ControlRequest

// .nugget.app.protoapi.ControlRequestType type = 1;
inline void ControlRequest::clear_type() {
  type_ = 0;
}
inline ::nugget::app::protoapi::ControlRequestType ControlRequest::_internal_type() const {
  return static_cast< ::nugget::app::protoapi::ControlRequestType >(type_);
}
inline ::nugget::app::protoapi::ControlRequestType ControlRequest::type() const {
  // @@protoc_insertion_point(field_get:nugget.app.protoapi.ControlRequest.type)
  return _internal_type();
}
inline void ControlRequest::_internal_set_type(::nugget::app::protoapi::ControlRequestType value) {
  
  type_ = value;
}
inline void ControlRequest::set_type(::nugget::app::protoapi::ControlRequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nugget.app.protoapi.ControlRequest.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoapi
}  // namespace app
}  // namespace nugget

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nugget::app::protoapi::NoticeCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nugget::app::protoapi::NoticeCode>() {
  return ::nugget::app::protoapi::NoticeCode_descriptor();
}
template <> struct is_proto_enum< ::nugget::app::protoapi::ControlRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nugget::app::protoapi::ControlRequestType>() {
  return ::nugget::app::protoapi::ControlRequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fprotoapi_2fcontrol_2eproto
