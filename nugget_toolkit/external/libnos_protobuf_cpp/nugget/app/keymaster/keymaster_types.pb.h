// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nugget/app/keymaster/keymaster_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nugget/app/keymaster/keymaster_defs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(int index);
namespace nugget {
namespace app {
namespace keymaster {
class Certificate;
struct CertificateDefaultTypeInternal;
extern CertificateDefaultTypeInternal _Certificate_default_instance_;
class CertificateChain;
struct CertificateChainDefaultTypeInternal;
extern CertificateChainDefaultTypeInternal _CertificateChain_default_instance_;
class ECKey;
struct ECKeyDefaultTypeInternal;
extern ECKeyDefaultTypeInternal _ECKey_default_instance_;
class HardwareAuthToken;
struct HardwareAuthTokenDefaultTypeInternal;
extern HardwareAuthTokenDefaultTypeInternal _HardwareAuthToken_default_instance_;
class HmacSharingParameters;
struct HmacSharingParametersDefaultTypeInternal;
extern HmacSharingParametersDefaultTypeInternal _HmacSharingParameters_default_instance_;
class KeyBlob;
struct KeyBlobDefaultTypeInternal;
extern KeyBlobDefaultTypeInternal _KeyBlob_default_instance_;
class KeyCharacteristics;
struct KeyCharacteristicsDefaultTypeInternal;
extern KeyCharacteristicsDefaultTypeInternal _KeyCharacteristics_default_instance_;
class KeyParameter;
struct KeyParameterDefaultTypeInternal;
extern KeyParameterDefaultTypeInternal _KeyParameter_default_instance_;
class KeyParameters;
struct KeyParametersDefaultTypeInternal;
extern KeyParametersDefaultTypeInternal _KeyParameters_default_instance_;
class OperationHandle;
struct OperationHandleDefaultTypeInternal;
extern OperationHandleDefaultTypeInternal _OperationHandle_default_instance_;
class RSAKey;
struct RSAKeyDefaultTypeInternal;
extern RSAKeyDefaultTypeInternal _RSAKey_default_instance_;
class SymmetricKey;
struct SymmetricKeyDefaultTypeInternal;
extern SymmetricKeyDefaultTypeInternal _SymmetricKey_default_instance_;
class VerificationToken;
struct VerificationTokenDefaultTypeInternal;
extern VerificationTokenDefaultTypeInternal _VerificationToken_default_instance_;
class VigoKey;
struct VigoKeyDefaultTypeInternal;
extern VigoKeyDefaultTypeInternal _VigoKey_default_instance_;
class VigoSecret;
struct VigoSecretDefaultTypeInternal;
extern VigoSecretDefaultTypeInternal _VigoSecret_default_instance_;
class VigoSignature;
struct VigoSignatureDefaultTypeInternal;
extern VigoSignatureDefaultTypeInternal _VigoSignature_default_instance_;
}  // namespace keymaster
}  // namespace app
}  // namespace nugget
PROTOBUF_NAMESPACE_OPEN
template<> ::nugget::app::keymaster::Certificate* Arena::CreateMaybeMessage<::nugget::app::keymaster::Certificate>(Arena*);
template<> ::nugget::app::keymaster::CertificateChain* Arena::CreateMaybeMessage<::nugget::app::keymaster::CertificateChain>(Arena*);
template<> ::nugget::app::keymaster::ECKey* Arena::CreateMaybeMessage<::nugget::app::keymaster::ECKey>(Arena*);
template<> ::nugget::app::keymaster::HardwareAuthToken* Arena::CreateMaybeMessage<::nugget::app::keymaster::HardwareAuthToken>(Arena*);
template<> ::nugget::app::keymaster::HmacSharingParameters* Arena::CreateMaybeMessage<::nugget::app::keymaster::HmacSharingParameters>(Arena*);
template<> ::nugget::app::keymaster::KeyBlob* Arena::CreateMaybeMessage<::nugget::app::keymaster::KeyBlob>(Arena*);
template<> ::nugget::app::keymaster::KeyCharacteristics* Arena::CreateMaybeMessage<::nugget::app::keymaster::KeyCharacteristics>(Arena*);
template<> ::nugget::app::keymaster::KeyParameter* Arena::CreateMaybeMessage<::nugget::app::keymaster::KeyParameter>(Arena*);
template<> ::nugget::app::keymaster::KeyParameters* Arena::CreateMaybeMessage<::nugget::app::keymaster::KeyParameters>(Arena*);
template<> ::nugget::app::keymaster::OperationHandle* Arena::CreateMaybeMessage<::nugget::app::keymaster::OperationHandle>(Arena*);
template<> ::nugget::app::keymaster::RSAKey* Arena::CreateMaybeMessage<::nugget::app::keymaster::RSAKey>(Arena*);
template<> ::nugget::app::keymaster::SymmetricKey* Arena::CreateMaybeMessage<::nugget::app::keymaster::SymmetricKey>(Arena*);
template<> ::nugget::app::keymaster::VerificationToken* Arena::CreateMaybeMessage<::nugget::app::keymaster::VerificationToken>(Arena*);
template<> ::nugget::app::keymaster::VigoKey* Arena::CreateMaybeMessage<::nugget::app::keymaster::VigoKey>(Arena*);
template<> ::nugget::app::keymaster::VigoSecret* Arena::CreateMaybeMessage<::nugget::app::keymaster::VigoSecret>(Arena*);
template<> ::nugget::app::keymaster::VigoSignature* Arena::CreateMaybeMessage<::nugget::app::keymaster::VigoSignature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nugget {
namespace app {
namespace keymaster {

enum PresharedSecretStatus : int {
  NOT_SET = 0,
  ALREADY_SET = 1,
  PresharedSecretStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PresharedSecretStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PresharedSecretStatus_IsValid(int value);
constexpr PresharedSecretStatus PresharedSecretStatus_MIN = NOT_SET;
constexpr PresharedSecretStatus PresharedSecretStatus_MAX = ALREADY_SET;
constexpr int PresharedSecretStatus_ARRAYSIZE = PresharedSecretStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PresharedSecretStatus_descriptor();
template<typename T>
inline const std::string& PresharedSecretStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PresharedSecretStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PresharedSecretStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PresharedSecretStatus_descriptor(), enum_t_value);
}
inline bool PresharedSecretStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PresharedSecretStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PresharedSecretStatus>(
    PresharedSecretStatus_descriptor(), name, value);
}
enum AttestationSelector : int {
  ATTEST_TEST = 0,
  ATTEST_BATCH = 1,
  ATTEST_INDIVIDUAL = 2,
  AttestationSelector_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AttestationSelector_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AttestationSelector_IsValid(int value);
constexpr AttestationSelector AttestationSelector_MIN = ATTEST_TEST;
constexpr AttestationSelector AttestationSelector_MAX = ATTEST_INDIVIDUAL;
constexpr int AttestationSelector_ARRAYSIZE = AttestationSelector_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttestationSelector_descriptor();
template<typename T>
inline const std::string& AttestationSelector_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttestationSelector>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttestationSelector_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttestationSelector_descriptor(), enum_t_value);
}
inline bool AttestationSelector_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttestationSelector* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttestationSelector>(
    AttestationSelector_descriptor(), name, value);
}
// ===================================================================

class KeyParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.KeyParameter) */ {
 public:
  inline KeyParameter() : KeyParameter(nullptr) {}
  virtual ~KeyParameter();
  explicit constexpr KeyParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyParameter(const KeyParameter& from);
  KeyParameter(KeyParameter&& from) noexcept
    : KeyParameter() {
    *this = ::std::move(from);
  }

  inline KeyParameter& operator=(const KeyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyParameter& operator=(KeyParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyParameter* internal_default_instance() {
    return reinterpret_cast<const KeyParameter*>(
               &_KeyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyParameter& a, KeyParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyParameter* New() const final {
    return CreateMaybeMessage<KeyParameter>(nullptr);
  }

  KeyParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyParameter& from);
  void MergeFrom(const KeyParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.KeyParameter";
  }
  protected:
  explicit KeyParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 4,
    kTagFieldNumber = 1,
    kIntegerFieldNumber = 2,
    kLongIntegerFieldNumber = 3,
  };
  // bytes blob = 4;
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .nugget.app.keymaster.Tag tag = 1;
  void clear_tag();
  ::nugget::app::keymaster::Tag tag() const;
  void set_tag(::nugget::app::keymaster::Tag value);
  private:
  ::nugget::app::keymaster::Tag _internal_tag() const;
  void _internal_set_tag(::nugget::app::keymaster::Tag value);
  public:

  // uint32 integer = 2;
  void clear_integer();
  ::PROTOBUF_NAMESPACE_ID::uint32 integer() const;
  void set_integer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_integer() const;
  void _internal_set_integer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 long_integer = 3;
  void clear_long_integer();
  ::PROTOBUF_NAMESPACE_ID::uint64 long_integer() const;
  void set_long_integer(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_long_integer() const;
  void _internal_set_long_integer(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.KeyParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  int tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 integer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 long_integer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.KeyParameters) */ {
 public:
  inline KeyParameters() : KeyParameters(nullptr) {}
  virtual ~KeyParameters();
  explicit constexpr KeyParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyParameters(const KeyParameters& from);
  KeyParameters(KeyParameters&& from) noexcept
    : KeyParameters() {
    *this = ::std::move(from);
  }

  inline KeyParameters& operator=(const KeyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyParameters& operator=(KeyParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyParameters* internal_default_instance() {
    return reinterpret_cast<const KeyParameters*>(
               &_KeyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyParameters& a, KeyParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyParameters* New() const final {
    return CreateMaybeMessage<KeyParameters>(nullptr);
  }

  KeyParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyParameters& from);
  void MergeFrom(const KeyParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.KeyParameters";
  }
  protected:
  explicit KeyParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // repeated .nugget.app.keymaster.KeyParameter params = 1;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::nugget::app::keymaster::KeyParameter* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::KeyParameter >*
      mutable_params();
  private:
  const ::nugget::app::keymaster::KeyParameter& _internal_params(int index) const;
  ::nugget::app::keymaster::KeyParameter* _internal_add_params();
  public:
  const ::nugget::app::keymaster::KeyParameter& params(int index) const;
  ::nugget::app::keymaster::KeyParameter* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::KeyParameter >&
      params() const;

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.KeyParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::KeyParameter > params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyBlob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.KeyBlob) */ {
 public:
  inline KeyBlob() : KeyBlob(nullptr) {}
  virtual ~KeyBlob();
  explicit constexpr KeyBlob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyBlob(const KeyBlob& from);
  KeyBlob(KeyBlob&& from) noexcept
    : KeyBlob() {
    *this = ::std::move(from);
  }

  inline KeyBlob& operator=(const KeyBlob& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyBlob& operator=(KeyBlob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyBlob& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyBlob* internal_default_instance() {
    return reinterpret_cast<const KeyBlob*>(
               &_KeyBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyBlob& a, KeyBlob& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyBlob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyBlob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyBlob* New() const final {
    return CreateMaybeMessage<KeyBlob>(nullptr);
  }

  KeyBlob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyBlob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyBlob& from);
  void MergeFrom(const KeyBlob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyBlob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.KeyBlob";
  }
  protected:
  explicit KeyBlob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1;
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.KeyBlob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class OperationHandle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.OperationHandle) */ {
 public:
  inline OperationHandle() : OperationHandle(nullptr) {}
  virtual ~OperationHandle();
  explicit constexpr OperationHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationHandle(const OperationHandle& from);
  OperationHandle(OperationHandle&& from) noexcept
    : OperationHandle() {
    *this = ::std::move(from);
  }

  inline OperationHandle& operator=(const OperationHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationHandle& operator=(OperationHandle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationHandle* internal_default_instance() {
    return reinterpret_cast<const OperationHandle*>(
               &_OperationHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OperationHandle& a, OperationHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationHandle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationHandle* New() const final {
    return CreateMaybeMessage<OperationHandle>(nullptr);
  }

  OperationHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationHandle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationHandle& from);
  void MergeFrom(const OperationHandle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationHandle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.OperationHandle";
  }
  protected:
  explicit OperationHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // uint64 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::uint64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.OperationHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class Certificate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.Certificate) */ {
 public:
  inline Certificate() : Certificate(nullptr) {}
  virtual ~Certificate();
  explicit constexpr Certificate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Certificate(const Certificate& from);
  Certificate(Certificate&& from) noexcept
    : Certificate() {
    *this = ::std::move(from);
  }

  inline Certificate& operator=(const Certificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Certificate& operator=(Certificate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Certificate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Certificate* internal_default_instance() {
    return reinterpret_cast<const Certificate*>(
               &_Certificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Certificate& a, Certificate& b) {
    a.Swap(&b);
  }
  inline void Swap(Certificate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Certificate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Certificate* New() const final {
    return CreateMaybeMessage<Certificate>(nullptr);
  }

  Certificate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Certificate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Certificate& from);
  void MergeFrom(const Certificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Certificate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.Certificate";
  }
  protected:
  explicit Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.Certificate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class CertificateChain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.CertificateChain) */ {
 public:
  inline CertificateChain() : CertificateChain(nullptr) {}
  virtual ~CertificateChain();
  explicit constexpr CertificateChain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CertificateChain(const CertificateChain& from);
  CertificateChain(CertificateChain&& from) noexcept
    : CertificateChain() {
    *this = ::std::move(from);
  }

  inline CertificateChain& operator=(const CertificateChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertificateChain& operator=(CertificateChain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CertificateChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertificateChain* internal_default_instance() {
    return reinterpret_cast<const CertificateChain*>(
               &_CertificateChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CertificateChain& a, CertificateChain& b) {
    a.Swap(&b);
  }
  inline void Swap(CertificateChain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertificateChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CertificateChain* New() const final {
    return CreateMaybeMessage<CertificateChain>(nullptr);
  }

  CertificateChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CertificateChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CertificateChain& from);
  void MergeFrom(const CertificateChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertificateChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.CertificateChain";
  }
  protected:
  explicit CertificateChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificatesFieldNumber = 1,
  };
  // repeated .nugget.app.keymaster.Certificate certificates = 1;
  int certificates_size() const;
  private:
  int _internal_certificates_size() const;
  public:
  void clear_certificates();
  ::nugget::app::keymaster::Certificate* mutable_certificates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::Certificate >*
      mutable_certificates();
  private:
  const ::nugget::app::keymaster::Certificate& _internal_certificates(int index) const;
  ::nugget::app::keymaster::Certificate* _internal_add_certificates();
  public:
  const ::nugget::app::keymaster::Certificate& certificates(int index) const;
  ::nugget::app::keymaster::Certificate* add_certificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::Certificate >&
      certificates() const;

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.CertificateChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::Certificate > certificates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyCharacteristics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.KeyCharacteristics) */ {
 public:
  inline KeyCharacteristics() : KeyCharacteristics(nullptr) {}
  virtual ~KeyCharacteristics();
  explicit constexpr KeyCharacteristics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyCharacteristics(const KeyCharacteristics& from);
  KeyCharacteristics(KeyCharacteristics&& from) noexcept
    : KeyCharacteristics() {
    *this = ::std::move(from);
  }

  inline KeyCharacteristics& operator=(const KeyCharacteristics& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyCharacteristics& operator=(KeyCharacteristics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyCharacteristics& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyCharacteristics* internal_default_instance() {
    return reinterpret_cast<const KeyCharacteristics*>(
               &_KeyCharacteristics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeyCharacteristics& a, KeyCharacteristics& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyCharacteristics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyCharacteristics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyCharacteristics* New() const final {
    return CreateMaybeMessage<KeyCharacteristics>(nullptr);
  }

  KeyCharacteristics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyCharacteristics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyCharacteristics& from);
  void MergeFrom(const KeyCharacteristics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyCharacteristics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.KeyCharacteristics";
  }
  protected:
  explicit KeyCharacteristics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoftwareEnforcedFieldNumber = 1,
    kTeeEnforcedFieldNumber = 2,
  };
  // .nugget.app.keymaster.KeyParameters software_enforced = 1;
  bool has_software_enforced() const;
  private:
  bool _internal_has_software_enforced() const;
  public:
  void clear_software_enforced();
  const ::nugget::app::keymaster::KeyParameters& software_enforced() const;
  ::nugget::app::keymaster::KeyParameters* release_software_enforced();
  ::nugget::app::keymaster::KeyParameters* mutable_software_enforced();
  void set_allocated_software_enforced(::nugget::app::keymaster::KeyParameters* software_enforced);
  private:
  const ::nugget::app::keymaster::KeyParameters& _internal_software_enforced() const;
  ::nugget::app::keymaster::KeyParameters* _internal_mutable_software_enforced();
  public:
  void unsafe_arena_set_allocated_software_enforced(
      ::nugget::app::keymaster::KeyParameters* software_enforced);
  ::nugget::app::keymaster::KeyParameters* unsafe_arena_release_software_enforced();

  // .nugget.app.keymaster.KeyParameters tee_enforced = 2;
  bool has_tee_enforced() const;
  private:
  bool _internal_has_tee_enforced() const;
  public:
  void clear_tee_enforced();
  const ::nugget::app::keymaster::KeyParameters& tee_enforced() const;
  ::nugget::app::keymaster::KeyParameters* release_tee_enforced();
  ::nugget::app::keymaster::KeyParameters* mutable_tee_enforced();
  void set_allocated_tee_enforced(::nugget::app::keymaster::KeyParameters* tee_enforced);
  private:
  const ::nugget::app::keymaster::KeyParameters& _internal_tee_enforced() const;
  ::nugget::app::keymaster::KeyParameters* _internal_mutable_tee_enforced();
  public:
  void unsafe_arena_set_allocated_tee_enforced(
      ::nugget::app::keymaster::KeyParameters* tee_enforced);
  ::nugget::app::keymaster::KeyParameters* unsafe_arena_release_tee_enforced();

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.KeyCharacteristics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::nugget::app::keymaster::KeyParameters* software_enforced_;
  ::nugget::app::keymaster::KeyParameters* tee_enforced_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class HmacSharingParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.HmacSharingParameters) */ {
 public:
  inline HmacSharingParameters() : HmacSharingParameters(nullptr) {}
  virtual ~HmacSharingParameters();
  explicit constexpr HmacSharingParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HmacSharingParameters(const HmacSharingParameters& from);
  HmacSharingParameters(HmacSharingParameters&& from) noexcept
    : HmacSharingParameters() {
    *this = ::std::move(from);
  }

  inline HmacSharingParameters& operator=(const HmacSharingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline HmacSharingParameters& operator=(HmacSharingParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HmacSharingParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const HmacSharingParameters* internal_default_instance() {
    return reinterpret_cast<const HmacSharingParameters*>(
               &_HmacSharingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HmacSharingParameters& a, HmacSharingParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(HmacSharingParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HmacSharingParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HmacSharingParameters* New() const final {
    return CreateMaybeMessage<HmacSharingParameters>(nullptr);
  }

  HmacSharingParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HmacSharingParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HmacSharingParameters& from);
  void MergeFrom(const HmacSharingParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmacSharingParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.HmacSharingParameters";
  }
  protected:
  explicit HmacSharingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
    kNonceFieldNumber = 2,
  };
  // bytes seed = 1;
  void clear_seed();
  const std::string& seed() const;
  void set_seed(const std::string& value);
  void set_seed(std::string&& value);
  void set_seed(const char* value);
  void set_seed(const void* value, size_t size);
  std::string* mutable_seed();
  std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  private:
  const std::string& _internal_seed() const;
  void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // bytes nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.HmacSharingParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class HardwareAuthToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.HardwareAuthToken) */ {
 public:
  inline HardwareAuthToken() : HardwareAuthToken(nullptr) {}
  virtual ~HardwareAuthToken();
  explicit constexpr HardwareAuthToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HardwareAuthToken(const HardwareAuthToken& from);
  HardwareAuthToken(HardwareAuthToken&& from) noexcept
    : HardwareAuthToken() {
    *this = ::std::move(from);
  }

  inline HardwareAuthToken& operator=(const HardwareAuthToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardwareAuthToken& operator=(HardwareAuthToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HardwareAuthToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const HardwareAuthToken* internal_default_instance() {
    return reinterpret_cast<const HardwareAuthToken*>(
               &_HardwareAuthToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HardwareAuthToken& a, HardwareAuthToken& b) {
    a.Swap(&b);
  }
  inline void Swap(HardwareAuthToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HardwareAuthToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HardwareAuthToken* New() const final {
    return CreateMaybeMessage<HardwareAuthToken>(nullptr);
  }

  HardwareAuthToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HardwareAuthToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HardwareAuthToken& from);
  void MergeFrom(const HardwareAuthToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardwareAuthToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.HardwareAuthToken";
  }
  protected:
  explicit HardwareAuthToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 6,
    kChallengeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAuthenticatorIdFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kAuthenticatorTypeFieldNumber = 7,
  };
  // bytes mac = 6;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // uint64 challenge = 1;
  void clear_challenge();
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge() const;
  void set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_challenge() const;
  void _internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 authenticator_id = 3;
  void clear_authenticator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 authenticator_id() const;
  void set_authenticator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authenticator_id() const;
  void _internal_set_authenticator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 authenticator_type = 7;
  void clear_authenticator_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 authenticator_type() const;
  void set_authenticator_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_authenticator_type() const;
  void _internal_set_authenticator_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.HardwareAuthToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authenticator_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 authenticator_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VerificationToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.VerificationToken) */ {
 public:
  inline VerificationToken() : VerificationToken(nullptr) {}
  virtual ~VerificationToken();
  explicit constexpr VerificationToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerificationToken(const VerificationToken& from);
  VerificationToken(VerificationToken&& from) noexcept
    : VerificationToken() {
    *this = ::std::move(from);
  }

  inline VerificationToken& operator=(const VerificationToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationToken& operator=(VerificationToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerificationToken* internal_default_instance() {
    return reinterpret_cast<const VerificationToken*>(
               &_VerificationToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VerificationToken& a, VerificationToken& b) {
    a.Swap(&b);
  }
  inline void Swap(VerificationToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerificationToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerificationToken* New() const final {
    return CreateMaybeMessage<VerificationToken>(nullptr);
  }

  VerificationToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationToken& from);
  void MergeFrom(const VerificationToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.VerificationToken";
  }
  protected:
  explicit VerificationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 5,
    kParamsVerifiedFieldNumber = 3,
    kChallengeFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kSecurityLevelFieldNumber = 4,
  };
  // bytes mac = 5;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // .nugget.app.keymaster.KeyParameters params_verified = 3;
  bool has_params_verified() const;
  private:
  bool _internal_has_params_verified() const;
  public:
  void clear_params_verified();
  const ::nugget::app::keymaster::KeyParameters& params_verified() const;
  ::nugget::app::keymaster::KeyParameters* release_params_verified();
  ::nugget::app::keymaster::KeyParameters* mutable_params_verified();
  void set_allocated_params_verified(::nugget::app::keymaster::KeyParameters* params_verified);
  private:
  const ::nugget::app::keymaster::KeyParameters& _internal_params_verified() const;
  ::nugget::app::keymaster::KeyParameters* _internal_mutable_params_verified();
  public:
  void unsafe_arena_set_allocated_params_verified(
      ::nugget::app::keymaster::KeyParameters* params_verified);
  ::nugget::app::keymaster::KeyParameters* unsafe_arena_release_params_verified();

  // uint64 challenge = 1;
  void clear_challenge();
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge() const;
  void set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_challenge() const;
  void _internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .nugget.app.keymaster.SecurityLevel security_level = 4;
  void clear_security_level();
  ::nugget::app::keymaster::SecurityLevel security_level() const;
  void set_security_level(::nugget::app::keymaster::SecurityLevel value);
  private:
  ::nugget::app::keymaster::SecurityLevel _internal_security_level() const;
  void _internal_set_security_level(::nugget::app::keymaster::SecurityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.VerificationToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::nugget::app::keymaster::KeyParameters* params_verified_;
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int security_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class RSAKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.RSAKey) */ {
 public:
  inline RSAKey() : RSAKey(nullptr) {}
  virtual ~RSAKey();
  explicit constexpr RSAKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSAKey(const RSAKey& from);
  RSAKey(RSAKey&& from) noexcept
    : RSAKey() {
    *this = ::std::move(from);
  }

  inline RSAKey& operator=(const RSAKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSAKey& operator=(RSAKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RSAKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSAKey* internal_default_instance() {
    return reinterpret_cast<const RSAKey*>(
               &_RSAKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RSAKey& a, RSAKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RSAKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSAKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RSAKey* New() const final {
    return CreateMaybeMessage<RSAKey>(nullptr);
  }

  RSAKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RSAKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RSAKey& from);
  void MergeFrom(const RSAKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSAKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.RSAKey";
  }
  protected:
  explicit RSAKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 2,
    kNFieldNumber = 3,
    kEFieldNumber = 1,
  };
  // bytes d = 2;
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const void* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // bytes n = 3;
  void clear_n();
  const std::string& n() const;
  void set_n(const std::string& value);
  void set_n(std::string&& value);
  void set_n(const char* value);
  void set_n(const void* value, size_t size);
  std::string* mutable_n();
  std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // uint32 e = 1;
  void clear_e();
  ::PROTOBUF_NAMESPACE_ID::uint32 e() const;
  void set_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e() const;
  void _internal_set_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.RSAKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ECKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.ECKey) */ {
 public:
  inline ECKey() : ECKey(nullptr) {}
  virtual ~ECKey();
  explicit constexpr ECKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECKey(const ECKey& from);
  ECKey(ECKey&& from) noexcept
    : ECKey() {
    *this = ::std::move(from);
  }

  inline ECKey& operator=(const ECKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECKey& operator=(ECKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ECKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECKey* internal_default_instance() {
    return reinterpret_cast<const ECKey*>(
               &_ECKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ECKey& a, ECKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ECKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ECKey* New() const final {
    return CreateMaybeMessage<ECKey>(nullptr);
  }

  ECKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ECKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ECKey& from);
  void MergeFrom(const ECKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.ECKey";
  }
  protected:
  explicit ECKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kCurveIdFieldNumber = 1,
  };
  // bytes d = 2;
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const void* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // bytes x = 3;
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const void* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // bytes y = 4;
  void clear_y();
  const std::string& y() const;
  void set_y(const std::string& value);
  void set_y(std::string&& value);
  void set_y(const char* value);
  void set_y(const void* value, size_t size);
  std::string* mutable_y();
  std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // uint32 curve_id = 1;
  void clear_curve_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_id() const;
  void set_curve_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curve_id() const;
  void _internal_set_curve_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.ECKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curve_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SymmetricKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.SymmetricKey) */ {
 public:
  inline SymmetricKey() : SymmetricKey(nullptr) {}
  virtual ~SymmetricKey();
  explicit constexpr SymmetricKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymmetricKey(const SymmetricKey& from);
  SymmetricKey(SymmetricKey&& from) noexcept
    : SymmetricKey() {
    *this = ::std::move(from);
  }

  inline SymmetricKey& operator=(const SymmetricKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymmetricKey& operator=(SymmetricKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymmetricKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymmetricKey* internal_default_instance() {
    return reinterpret_cast<const SymmetricKey*>(
               &_SymmetricKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SymmetricKey& a, SymmetricKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SymmetricKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymmetricKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymmetricKey* New() const final {
    return CreateMaybeMessage<SymmetricKey>(nullptr);
  }

  SymmetricKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymmetricKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymmetricKey& from);
  void MergeFrom(const SymmetricKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymmetricKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.SymmetricKey";
  }
  protected:
  explicit SymmetricKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 1,
  };
  // bytes material = 1;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const void* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.SymmetricKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VigoKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.VigoKey) */ {
 public:
  inline VigoKey() : VigoKey(nullptr) {}
  virtual ~VigoKey();
  explicit constexpr VigoKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VigoKey(const VigoKey& from);
  VigoKey(VigoKey&& from) noexcept
    : VigoKey() {
    *this = ::std::move(from);
  }

  inline VigoKey& operator=(const VigoKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline VigoKey& operator=(VigoKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VigoKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const VigoKey* internal_default_instance() {
    return reinterpret_cast<const VigoKey*>(
               &_VigoKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VigoKey& a, VigoKey& b) {
    a.Swap(&b);
  }
  inline void Swap(VigoKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VigoKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VigoKey* New() const final {
    return CreateMaybeMessage<VigoKey>(nullptr);
  }

  VigoKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VigoKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VigoKey& from);
  void MergeFrom(const VigoKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VigoKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.VigoKey";
  }
  protected:
  explicit VigoKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
  };
  // bytes x = 1;
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const void* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.VigoKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VigoSignature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.VigoSignature) */ {
 public:
  inline VigoSignature() : VigoSignature(nullptr) {}
  virtual ~VigoSignature();
  explicit constexpr VigoSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VigoSignature(const VigoSignature& from);
  VigoSignature(VigoSignature&& from) noexcept
    : VigoSignature() {
    *this = ::std::move(from);
  }

  inline VigoSignature& operator=(const VigoSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline VigoSignature& operator=(VigoSignature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VigoSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const VigoSignature* internal_default_instance() {
    return reinterpret_cast<const VigoSignature*>(
               &_VigoSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VigoSignature& a, VigoSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(VigoSignature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VigoSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VigoSignature* New() const final {
    return CreateMaybeMessage<VigoSignature>(nullptr);
  }

  VigoSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VigoSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VigoSignature& from);
  void MergeFrom(const VigoSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VigoSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.VigoSignature";
  }
  protected:
  explicit VigoSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kSFieldNumber = 2,
  };
  // bytes r = 1;
  void clear_r();
  const std::string& r() const;
  void set_r(const std::string& value);
  void set_r(std::string&& value);
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  std::string* mutable_r();
  std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes s = 2;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.VigoSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class VigoSecret PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nugget.app.keymaster.VigoSecret) */ {
 public:
  inline VigoSecret() : VigoSecret(nullptr) {}
  virtual ~VigoSecret();
  explicit constexpr VigoSecret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VigoSecret(const VigoSecret& from);
  VigoSecret(VigoSecret&& from) noexcept
    : VigoSecret() {
    *this = ::std::move(from);
  }

  inline VigoSecret& operator=(const VigoSecret& from) {
    CopyFrom(from);
    return *this;
  }
  inline VigoSecret& operator=(VigoSecret&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VigoSecret& default_instance() {
    return *internal_default_instance();
  }
  static inline const VigoSecret* internal_default_instance() {
    return reinterpret_cast<const VigoSecret*>(
               &_VigoSecret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VigoSecret& a, VigoSecret& b) {
    a.Swap(&b);
  }
  inline void Swap(VigoSecret* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VigoSecret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VigoSecret* New() const final {
    return CreateMaybeMessage<VigoSecret>(nullptr);
  }

  VigoSecret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VigoSecret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VigoSecret& from);
  void MergeFrom(const VigoSecret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VigoSecret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nugget.app.keymaster.VigoSecret";
  }
  protected:
  explicit VigoSecret(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 1,
    kIvFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // bytes material = 1;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const void* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // bytes iv = 2;
  void clear_iv();
  const std::string& iv() const;
  void set_iv(const std::string& value);
  void set_iv(std::string&& value);
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  std::string* mutable_iv();
  std::string* release_iv();
  void set_allocated_iv(std::string* iv);
  private:
  const std::string& _internal_iv() const;
  void _internal_set_iv(const std::string& value);
  std::string* _internal_mutable_iv();
  public:

  // bytes tag = 3;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:nugget.app.keymaster.VigoSecret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyParameter

// .nugget.app.keymaster.Tag tag = 1;
inline void KeyParameter::clear_tag() {
  tag_ = 0;
}
inline ::nugget::app::keymaster::Tag KeyParameter::_internal_tag() const {
  return static_cast< ::nugget::app::keymaster::Tag >(tag_);
}
inline ::nugget::app::keymaster::Tag KeyParameter::tag() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyParameter.tag)
  return _internal_tag();
}
inline void KeyParameter::_internal_set_tag(::nugget::app::keymaster::Tag value) {
  
  tag_ = value;
}
inline void KeyParameter::set_tag(::nugget::app::keymaster::Tag value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.KeyParameter.tag)
}

// uint32 integer = 2;
inline void KeyParameter::clear_integer() {
  integer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyParameter::_internal_integer() const {
  return integer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyParameter::integer() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyParameter.integer)
  return _internal_integer();
}
inline void KeyParameter::_internal_set_integer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  integer_ = value;
}
inline void KeyParameter::set_integer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.KeyParameter.integer)
}

// uint64 long_integer = 3;
inline void KeyParameter::clear_long_integer() {
  long_integer_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyParameter::_internal_long_integer() const {
  return long_integer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyParameter::long_integer() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyParameter.long_integer)
  return _internal_long_integer();
}
inline void KeyParameter::_internal_set_long_integer(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  long_integer_ = value;
}
inline void KeyParameter::set_long_integer(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_long_integer(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.KeyParameter.long_integer)
}

// bytes blob = 4;
inline void KeyParameter::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& KeyParameter::blob() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyParameter.blob)
  return _internal_blob();
}
inline void KeyParameter::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.KeyParameter.blob)
}
inline std::string* KeyParameter::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.KeyParameter.blob)
  return _internal_mutable_blob();
}
inline const std::string& KeyParameter::_internal_blob() const {
  return blob_.Get();
}
inline void KeyParameter::_internal_set_blob(const std::string& value) {
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyParameter::set_blob(std::string&& value) {
  
  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.KeyParameter.blob)
}
inline void KeyParameter::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.KeyParameter.blob)
}
inline void KeyParameter::set_blob(const void* value,
    size_t size) {
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.KeyParameter.blob)
}
inline std::string* KeyParameter::_internal_mutable_blob() {
  
  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyParameter::release_blob() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.KeyParameter.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyParameter::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    
  } else {
    
  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.KeyParameter.blob)
}

// -------------------------------------------------------------------

// KeyParameters

// repeated .nugget.app.keymaster.KeyParameter params = 1;
inline int KeyParameters::_internal_params_size() const {
  return params_.size();
}
inline int KeyParameters::params_size() const {
  return _internal_params_size();
}
inline void KeyParameters::clear_params() {
  params_.Clear();
}
inline ::nugget::app::keymaster::KeyParameter* KeyParameters::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.KeyParameters.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::KeyParameter >*
KeyParameters::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:nugget.app.keymaster.KeyParameters.params)
  return &params_;
}
inline const ::nugget::app::keymaster::KeyParameter& KeyParameters::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::nugget::app::keymaster::KeyParameter& KeyParameters::params(int index) const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyParameters.params)
  return _internal_params(index);
}
inline ::nugget::app::keymaster::KeyParameter* KeyParameters::_internal_add_params() {
  return params_.Add();
}
inline ::nugget::app::keymaster::KeyParameter* KeyParameters::add_params() {
  // @@protoc_insertion_point(field_add:nugget.app.keymaster.KeyParameters.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::KeyParameter >&
KeyParameters::params() const {
  // @@protoc_insertion_point(field_list:nugget.app.keymaster.KeyParameters.params)
  return params_;
}

// -------------------------------------------------------------------

// KeyBlob

// bytes blob = 1;
inline void KeyBlob::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& KeyBlob::blob() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyBlob.blob)
  return _internal_blob();
}
inline void KeyBlob::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.KeyBlob.blob)
}
inline std::string* KeyBlob::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.KeyBlob.blob)
  return _internal_mutable_blob();
}
inline const std::string& KeyBlob::_internal_blob() const {
  return blob_.Get();
}
inline void KeyBlob::_internal_set_blob(const std::string& value) {
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyBlob::set_blob(std::string&& value) {
  
  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.KeyBlob.blob)
}
inline void KeyBlob::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.KeyBlob.blob)
}
inline void KeyBlob::set_blob(const void* value,
    size_t size) {
  
  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.KeyBlob.blob)
}
inline std::string* KeyBlob::_internal_mutable_blob() {
  
  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyBlob::release_blob() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.KeyBlob.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyBlob::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    
  } else {
    
  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.KeyBlob.blob)
}

// -------------------------------------------------------------------

// OperationHandle

// uint64 handle = 1;
inline void OperationHandle::clear_handle() {
  handle_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationHandle::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationHandle::handle() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.OperationHandle.handle)
  return _internal_handle();
}
inline void OperationHandle::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  handle_ = value;
}
inline void OperationHandle::set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.OperationHandle.handle)
}

// -------------------------------------------------------------------

// Certificate

// bytes data = 1;
inline void Certificate::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Certificate::data() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.Certificate.data)
  return _internal_data();
}
inline void Certificate::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.Certificate.data)
}
inline std::string* Certificate::mutable_data() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.Certificate.data)
  return _internal_mutable_data();
}
inline const std::string& Certificate::_internal_data() const {
  return data_.Get();
}
inline void Certificate::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Certificate::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.Certificate.data)
}
inline void Certificate::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.Certificate.data)
}
inline void Certificate::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.Certificate.data)
}
inline std::string* Certificate::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Certificate::release_data() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.Certificate.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Certificate::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.Certificate.data)
}

// -------------------------------------------------------------------

// CertificateChain

// repeated .nugget.app.keymaster.Certificate certificates = 1;
inline int CertificateChain::_internal_certificates_size() const {
  return certificates_.size();
}
inline int CertificateChain::certificates_size() const {
  return _internal_certificates_size();
}
inline void CertificateChain::clear_certificates() {
  certificates_.Clear();
}
inline ::nugget::app::keymaster::Certificate* CertificateChain::mutable_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.CertificateChain.certificates)
  return certificates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::Certificate >*
CertificateChain::mutable_certificates() {
  // @@protoc_insertion_point(field_mutable_list:nugget.app.keymaster.CertificateChain.certificates)
  return &certificates_;
}
inline const ::nugget::app::keymaster::Certificate& CertificateChain::_internal_certificates(int index) const {
  return certificates_.Get(index);
}
inline const ::nugget::app::keymaster::Certificate& CertificateChain::certificates(int index) const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.CertificateChain.certificates)
  return _internal_certificates(index);
}
inline ::nugget::app::keymaster::Certificate* CertificateChain::_internal_add_certificates() {
  return certificates_.Add();
}
inline ::nugget::app::keymaster::Certificate* CertificateChain::add_certificates() {
  // @@protoc_insertion_point(field_add:nugget.app.keymaster.CertificateChain.certificates)
  return _internal_add_certificates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nugget::app::keymaster::Certificate >&
CertificateChain::certificates() const {
  // @@protoc_insertion_point(field_list:nugget.app.keymaster.CertificateChain.certificates)
  return certificates_;
}

// -------------------------------------------------------------------

// KeyCharacteristics

// .nugget.app.keymaster.KeyParameters software_enforced = 1;
inline bool KeyCharacteristics::_internal_has_software_enforced() const {
  return this != internal_default_instance() && software_enforced_ != nullptr;
}
inline bool KeyCharacteristics::has_software_enforced() const {
  return _internal_has_software_enforced();
}
inline void KeyCharacteristics::clear_software_enforced() {
  if (GetArena() == nullptr && software_enforced_ != nullptr) {
    delete software_enforced_;
  }
  software_enforced_ = nullptr;
}
inline const ::nugget::app::keymaster::KeyParameters& KeyCharacteristics::_internal_software_enforced() const {
  const ::nugget::app::keymaster::KeyParameters* p = software_enforced_;
  return p != nullptr ? *p : reinterpret_cast<const ::nugget::app::keymaster::KeyParameters&>(
      ::nugget::app::keymaster::_KeyParameters_default_instance_);
}
inline const ::nugget::app::keymaster::KeyParameters& KeyCharacteristics::software_enforced() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyCharacteristics.software_enforced)
  return _internal_software_enforced();
}
inline void KeyCharacteristics::unsafe_arena_set_allocated_software_enforced(
    ::nugget::app::keymaster::KeyParameters* software_enforced) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_enforced_);
  }
  software_enforced_ = software_enforced;
  if (software_enforced) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nugget.app.keymaster.KeyCharacteristics.software_enforced)
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::release_software_enforced() {
  
  ::nugget::app::keymaster::KeyParameters* temp = software_enforced_;
  software_enforced_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::unsafe_arena_release_software_enforced() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.KeyCharacteristics.software_enforced)
  
  ::nugget::app::keymaster::KeyParameters* temp = software_enforced_;
  software_enforced_ = nullptr;
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::_internal_mutable_software_enforced() {
  
  if (software_enforced_ == nullptr) {
    auto* p = CreateMaybeMessage<::nugget::app::keymaster::KeyParameters>(GetArena());
    software_enforced_ = p;
  }
  return software_enforced_;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::mutable_software_enforced() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.KeyCharacteristics.software_enforced)
  return _internal_mutable_software_enforced();
}
inline void KeyCharacteristics::set_allocated_software_enforced(::nugget::app::keymaster::KeyParameters* software_enforced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete software_enforced_;
  }
  if (software_enforced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(software_enforced);
    if (message_arena != submessage_arena) {
      software_enforced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software_enforced, submessage_arena);
    }
    
  } else {
    
  }
  software_enforced_ = software_enforced;
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.KeyCharacteristics.software_enforced)
}

// .nugget.app.keymaster.KeyParameters tee_enforced = 2;
inline bool KeyCharacteristics::_internal_has_tee_enforced() const {
  return this != internal_default_instance() && tee_enforced_ != nullptr;
}
inline bool KeyCharacteristics::has_tee_enforced() const {
  return _internal_has_tee_enforced();
}
inline void KeyCharacteristics::clear_tee_enforced() {
  if (GetArena() == nullptr && tee_enforced_ != nullptr) {
    delete tee_enforced_;
  }
  tee_enforced_ = nullptr;
}
inline const ::nugget::app::keymaster::KeyParameters& KeyCharacteristics::_internal_tee_enforced() const {
  const ::nugget::app::keymaster::KeyParameters* p = tee_enforced_;
  return p != nullptr ? *p : reinterpret_cast<const ::nugget::app::keymaster::KeyParameters&>(
      ::nugget::app::keymaster::_KeyParameters_default_instance_);
}
inline const ::nugget::app::keymaster::KeyParameters& KeyCharacteristics::tee_enforced() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.KeyCharacteristics.tee_enforced)
  return _internal_tee_enforced();
}
inline void KeyCharacteristics::unsafe_arena_set_allocated_tee_enforced(
    ::nugget::app::keymaster::KeyParameters* tee_enforced) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tee_enforced_);
  }
  tee_enforced_ = tee_enforced;
  if (tee_enforced) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nugget.app.keymaster.KeyCharacteristics.tee_enforced)
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::release_tee_enforced() {
  
  ::nugget::app::keymaster::KeyParameters* temp = tee_enforced_;
  tee_enforced_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::unsafe_arena_release_tee_enforced() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.KeyCharacteristics.tee_enforced)
  
  ::nugget::app::keymaster::KeyParameters* temp = tee_enforced_;
  tee_enforced_ = nullptr;
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::_internal_mutable_tee_enforced() {
  
  if (tee_enforced_ == nullptr) {
    auto* p = CreateMaybeMessage<::nugget::app::keymaster::KeyParameters>(GetArena());
    tee_enforced_ = p;
  }
  return tee_enforced_;
}
inline ::nugget::app::keymaster::KeyParameters* KeyCharacteristics::mutable_tee_enforced() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.KeyCharacteristics.tee_enforced)
  return _internal_mutable_tee_enforced();
}
inline void KeyCharacteristics::set_allocated_tee_enforced(::nugget::app::keymaster::KeyParameters* tee_enforced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tee_enforced_;
  }
  if (tee_enforced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tee_enforced);
    if (message_arena != submessage_arena) {
      tee_enforced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tee_enforced, submessage_arena);
    }
    
  } else {
    
  }
  tee_enforced_ = tee_enforced;
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.KeyCharacteristics.tee_enforced)
}

// -------------------------------------------------------------------

// HmacSharingParameters

// bytes seed = 1;
inline void HmacSharingParameters::clear_seed() {
  seed_.ClearToEmpty();
}
inline const std::string& HmacSharingParameters::seed() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HmacSharingParameters.seed)
  return _internal_seed();
}
inline void HmacSharingParameters::set_seed(const std::string& value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HmacSharingParameters.seed)
}
inline std::string* HmacSharingParameters::mutable_seed() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.HmacSharingParameters.seed)
  return _internal_mutable_seed();
}
inline const std::string& HmacSharingParameters::_internal_seed() const {
  return seed_.Get();
}
inline void HmacSharingParameters::_internal_set_seed(const std::string& value) {
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HmacSharingParameters::set_seed(std::string&& value) {
  
  seed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.HmacSharingParameters.seed)
}
inline void HmacSharingParameters::set_seed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.HmacSharingParameters.seed)
}
inline void HmacSharingParameters::set_seed(const void* value,
    size_t size) {
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.HmacSharingParameters.seed)
}
inline std::string* HmacSharingParameters::_internal_mutable_seed() {
  
  return seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HmacSharingParameters::release_seed() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.HmacSharingParameters.seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HmacSharingParameters::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.HmacSharingParameters.seed)
}

// bytes nonce = 2;
inline void HmacSharingParameters::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& HmacSharingParameters::nonce() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HmacSharingParameters.nonce)
  return _internal_nonce();
}
inline void HmacSharingParameters::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HmacSharingParameters.nonce)
}
inline std::string* HmacSharingParameters::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.HmacSharingParameters.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& HmacSharingParameters::_internal_nonce() const {
  return nonce_.Get();
}
inline void HmacSharingParameters::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HmacSharingParameters::set_nonce(std::string&& value) {
  
  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.HmacSharingParameters.nonce)
}
inline void HmacSharingParameters::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.HmacSharingParameters.nonce)
}
inline void HmacSharingParameters::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.HmacSharingParameters.nonce)
}
inline std::string* HmacSharingParameters::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HmacSharingParameters::release_nonce() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.HmacSharingParameters.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HmacSharingParameters::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.HmacSharingParameters.nonce)
}

// -------------------------------------------------------------------

// HardwareAuthToken

// uint64 challenge = 1;
inline void HardwareAuthToken::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::_internal_challenge() const {
  return challenge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::challenge() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.challenge)
  return _internal_challenge();
}
inline void HardwareAuthToken::_internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  challenge_ = value;
}
inline void HardwareAuthToken::set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_challenge(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.challenge)
}

// uint64 user_id = 2;
inline void HardwareAuthToken::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::user_id() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.user_id)
  return _internal_user_id();
}
inline void HardwareAuthToken::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void HardwareAuthToken::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.user_id)
}

// uint64 authenticator_id = 3;
inline void HardwareAuthToken::clear_authenticator_id() {
  authenticator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::_internal_authenticator_id() const {
  return authenticator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::authenticator_id() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.authenticator_id)
  return _internal_authenticator_id();
}
inline void HardwareAuthToken::_internal_set_authenticator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  authenticator_id_ = value;
}
inline void HardwareAuthToken::set_authenticator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authenticator_id(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.authenticator_id)
}

// uint64 timestamp = 5;
inline void HardwareAuthToken::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardwareAuthToken::timestamp() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.timestamp)
  return _internal_timestamp();
}
inline void HardwareAuthToken::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void HardwareAuthToken::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.timestamp)
}

// bytes mac = 6;
inline void HardwareAuthToken::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& HardwareAuthToken::mac() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.mac)
  return _internal_mac();
}
inline void HardwareAuthToken::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.mac)
}
inline std::string* HardwareAuthToken::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.HardwareAuthToken.mac)
  return _internal_mutable_mac();
}
inline const std::string& HardwareAuthToken::_internal_mac() const {
  return mac_.Get();
}
inline void HardwareAuthToken::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HardwareAuthToken::set_mac(std::string&& value) {
  
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.HardwareAuthToken.mac)
}
inline void HardwareAuthToken::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.HardwareAuthToken.mac)
}
inline void HardwareAuthToken::set_mac(const void* value,
    size_t size) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.HardwareAuthToken.mac)
}
inline std::string* HardwareAuthToken::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HardwareAuthToken::release_mac() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.HardwareAuthToken.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HardwareAuthToken::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.HardwareAuthToken.mac)
}

// uint32 authenticator_type = 7;
inline void HardwareAuthToken::clear_authenticator_type() {
  authenticator_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HardwareAuthToken::_internal_authenticator_type() const {
  return authenticator_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HardwareAuthToken::authenticator_type() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.HardwareAuthToken.authenticator_type)
  return _internal_authenticator_type();
}
inline void HardwareAuthToken::_internal_set_authenticator_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  authenticator_type_ = value;
}
inline void HardwareAuthToken::set_authenticator_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_authenticator_type(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.HardwareAuthToken.authenticator_type)
}

// -------------------------------------------------------------------

// VerificationToken

// uint64 challenge = 1;
inline void VerificationToken::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerificationToken::_internal_challenge() const {
  return challenge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerificationToken::challenge() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VerificationToken.challenge)
  return _internal_challenge();
}
inline void VerificationToken::_internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  challenge_ = value;
}
inline void VerificationToken::set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_challenge(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VerificationToken.challenge)
}

// uint64 timestamp = 2;
inline void VerificationToken::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerificationToken::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerificationToken::timestamp() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VerificationToken.timestamp)
  return _internal_timestamp();
}
inline void VerificationToken::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void VerificationToken::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VerificationToken.timestamp)
}

// .nugget.app.keymaster.KeyParameters params_verified = 3;
inline bool VerificationToken::_internal_has_params_verified() const {
  return this != internal_default_instance() && params_verified_ != nullptr;
}
inline bool VerificationToken::has_params_verified() const {
  return _internal_has_params_verified();
}
inline void VerificationToken::clear_params_verified() {
  if (GetArena() == nullptr && params_verified_ != nullptr) {
    delete params_verified_;
  }
  params_verified_ = nullptr;
}
inline const ::nugget::app::keymaster::KeyParameters& VerificationToken::_internal_params_verified() const {
  const ::nugget::app::keymaster::KeyParameters* p = params_verified_;
  return p != nullptr ? *p : reinterpret_cast<const ::nugget::app::keymaster::KeyParameters&>(
      ::nugget::app::keymaster::_KeyParameters_default_instance_);
}
inline const ::nugget::app::keymaster::KeyParameters& VerificationToken::params_verified() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VerificationToken.params_verified)
  return _internal_params_verified();
}
inline void VerificationToken::unsafe_arena_set_allocated_params_verified(
    ::nugget::app::keymaster::KeyParameters* params_verified) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_verified_);
  }
  params_verified_ = params_verified;
  if (params_verified) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nugget.app.keymaster.VerificationToken.params_verified)
}
inline ::nugget::app::keymaster::KeyParameters* VerificationToken::release_params_verified() {
  
  ::nugget::app::keymaster::KeyParameters* temp = params_verified_;
  params_verified_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* VerificationToken::unsafe_arena_release_params_verified() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VerificationToken.params_verified)
  
  ::nugget::app::keymaster::KeyParameters* temp = params_verified_;
  params_verified_ = nullptr;
  return temp;
}
inline ::nugget::app::keymaster::KeyParameters* VerificationToken::_internal_mutable_params_verified() {
  
  if (params_verified_ == nullptr) {
    auto* p = CreateMaybeMessage<::nugget::app::keymaster::KeyParameters>(GetArena());
    params_verified_ = p;
  }
  return params_verified_;
}
inline ::nugget::app::keymaster::KeyParameters* VerificationToken::mutable_params_verified() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VerificationToken.params_verified)
  return _internal_mutable_params_verified();
}
inline void VerificationToken::set_allocated_params_verified(::nugget::app::keymaster::KeyParameters* params_verified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_verified_;
  }
  if (params_verified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params_verified);
    if (message_arena != submessage_arena) {
      params_verified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params_verified, submessage_arena);
    }
    
  } else {
    
  }
  params_verified_ = params_verified;
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VerificationToken.params_verified)
}

// .nugget.app.keymaster.SecurityLevel security_level = 4;
inline void VerificationToken::clear_security_level() {
  security_level_ = 0;
}
inline ::nugget::app::keymaster::SecurityLevel VerificationToken::_internal_security_level() const {
  return static_cast< ::nugget::app::keymaster::SecurityLevel >(security_level_);
}
inline ::nugget::app::keymaster::SecurityLevel VerificationToken::security_level() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VerificationToken.security_level)
  return _internal_security_level();
}
inline void VerificationToken::_internal_set_security_level(::nugget::app::keymaster::SecurityLevel value) {
  
  security_level_ = value;
}
inline void VerificationToken::set_security_level(::nugget::app::keymaster::SecurityLevel value) {
  _internal_set_security_level(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VerificationToken.security_level)
}

// bytes mac = 5;
inline void VerificationToken::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& VerificationToken::mac() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VerificationToken.mac)
  return _internal_mac();
}
inline void VerificationToken::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VerificationToken.mac)
}
inline std::string* VerificationToken::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VerificationToken.mac)
  return _internal_mutable_mac();
}
inline const std::string& VerificationToken::_internal_mac() const {
  return mac_.Get();
}
inline void VerificationToken::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VerificationToken::set_mac(std::string&& value) {
  
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VerificationToken.mac)
}
inline void VerificationToken::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VerificationToken.mac)
}
inline void VerificationToken::set_mac(const void* value,
    size_t size) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VerificationToken.mac)
}
inline std::string* VerificationToken::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VerificationToken::release_mac() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VerificationToken.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerificationToken::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VerificationToken.mac)
}

// -------------------------------------------------------------------

// RSAKey

// uint32 e = 1;
inline void RSAKey::clear_e() {
  e_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSAKey::_internal_e() const {
  return e_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RSAKey::e() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.RSAKey.e)
  return _internal_e();
}
inline void RSAKey::_internal_set_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  e_ = value;
}
inline void RSAKey::set_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.RSAKey.e)
}

// bytes d = 2;
inline void RSAKey::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& RSAKey::d() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.RSAKey.d)
  return _internal_d();
}
inline void RSAKey::set_d(const std::string& value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.RSAKey.d)
}
inline std::string* RSAKey::mutable_d() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.RSAKey.d)
  return _internal_mutable_d();
}
inline const std::string& RSAKey::_internal_d() const {
  return d_.Get();
}
inline void RSAKey::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RSAKey::set_d(std::string&& value) {
  
  d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.RSAKey.d)
}
inline void RSAKey::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.RSAKey.d)
}
inline void RSAKey::set_d(const void* value,
    size_t size) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.RSAKey.d)
}
inline std::string* RSAKey::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RSAKey::release_d() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.RSAKey.d)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RSAKey::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.RSAKey.d)
}

// bytes n = 3;
inline void RSAKey::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& RSAKey::n() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.RSAKey.n)
  return _internal_n();
}
inline void RSAKey::set_n(const std::string& value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.RSAKey.n)
}
inline std::string* RSAKey::mutable_n() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.RSAKey.n)
  return _internal_mutable_n();
}
inline const std::string& RSAKey::_internal_n() const {
  return n_.Get();
}
inline void RSAKey::_internal_set_n(const std::string& value) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RSAKey::set_n(std::string&& value) {
  
  n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.RSAKey.n)
}
inline void RSAKey::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.RSAKey.n)
}
inline void RSAKey::set_n(const void* value,
    size_t size) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.RSAKey.n)
}
inline std::string* RSAKey::_internal_mutable_n() {
  
  return n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RSAKey::release_n() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.RSAKey.n)
  return n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RSAKey::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.RSAKey.n)
}

// -------------------------------------------------------------------

// ECKey

// uint32 curve_id = 1;
inline void ECKey::clear_curve_id() {
  curve_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ECKey::_internal_curve_id() const {
  return curve_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ECKey::curve_id() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.ECKey.curve_id)
  return _internal_curve_id();
}
inline void ECKey::_internal_set_curve_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  curve_id_ = value;
}
inline void ECKey::set_curve_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curve_id(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.ECKey.curve_id)
}

// bytes d = 2;
inline void ECKey::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& ECKey::d() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.ECKey.d)
  return _internal_d();
}
inline void ECKey::set_d(const std::string& value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.ECKey.d)
}
inline std::string* ECKey::mutable_d() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.ECKey.d)
  return _internal_mutable_d();
}
inline const std::string& ECKey::_internal_d() const {
  return d_.Get();
}
inline void ECKey::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ECKey::set_d(std::string&& value) {
  
  d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.ECKey.d)
}
inline void ECKey::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.ECKey.d)
}
inline void ECKey::set_d(const void* value,
    size_t size) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.ECKey.d)
}
inline std::string* ECKey::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ECKey::release_d() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.ECKey.d)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ECKey::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.ECKey.d)
}

// bytes x = 3;
inline void ECKey::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& ECKey::x() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.ECKey.x)
  return _internal_x();
}
inline void ECKey::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.ECKey.x)
}
inline std::string* ECKey::mutable_x() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.ECKey.x)
  return _internal_mutable_x();
}
inline const std::string& ECKey::_internal_x() const {
  return x_.Get();
}
inline void ECKey::_internal_set_x(const std::string& value) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ECKey::set_x(std::string&& value) {
  
  x_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.ECKey.x)
}
inline void ECKey::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.ECKey.x)
}
inline void ECKey::set_x(const void* value,
    size_t size) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.ECKey.x)
}
inline std::string* ECKey::_internal_mutable_x() {
  
  return x_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ECKey::release_x() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.ECKey.x)
  return x_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ECKey::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.ECKey.x)
}

// bytes y = 4;
inline void ECKey::clear_y() {
  y_.ClearToEmpty();
}
inline const std::string& ECKey::y() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.ECKey.y)
  return _internal_y();
}
inline void ECKey::set_y(const std::string& value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.ECKey.y)
}
inline std::string* ECKey::mutable_y() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.ECKey.y)
  return _internal_mutable_y();
}
inline const std::string& ECKey::_internal_y() const {
  return y_.Get();
}
inline void ECKey::_internal_set_y(const std::string& value) {
  
  y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ECKey::set_y(std::string&& value) {
  
  y_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.ECKey.y)
}
inline void ECKey::set_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.ECKey.y)
}
inline void ECKey::set_y(const void* value,
    size_t size) {
  
  y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.ECKey.y)
}
inline std::string* ECKey::_internal_mutable_y() {
  
  return y_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ECKey::release_y() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.ECKey.y)
  return y_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ECKey::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    
  } else {
    
  }
  y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.ECKey.y)
}

// -------------------------------------------------------------------

// SymmetricKey

// bytes material = 1;
inline void SymmetricKey::clear_material() {
  material_.ClearToEmpty();
}
inline const std::string& SymmetricKey::material() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.SymmetricKey.material)
  return _internal_material();
}
inline void SymmetricKey::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.SymmetricKey.material)
}
inline std::string* SymmetricKey::mutable_material() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.SymmetricKey.material)
  return _internal_mutable_material();
}
inline const std::string& SymmetricKey::_internal_material() const {
  return material_.Get();
}
inline void SymmetricKey::_internal_set_material(const std::string& value) {
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SymmetricKey::set_material(std::string&& value) {
  
  material_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.SymmetricKey.material)
}
inline void SymmetricKey::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.SymmetricKey.material)
}
inline void SymmetricKey::set_material(const void* value,
    size_t size) {
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.SymmetricKey.material)
}
inline std::string* SymmetricKey::_internal_mutable_material() {
  
  return material_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SymmetricKey::release_material() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.SymmetricKey.material)
  return material_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SymmetricKey::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.SymmetricKey.material)
}

// -------------------------------------------------------------------

// VigoKey

// bytes x = 1;
inline void VigoKey::clear_x() {
  x_.ClearToEmpty();
}
inline const std::string& VigoKey::x() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoKey.x)
  return _internal_x();
}
inline void VigoKey::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoKey.x)
}
inline std::string* VigoKey::mutable_x() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoKey.x)
  return _internal_mutable_x();
}
inline const std::string& VigoKey::_internal_x() const {
  return x_.Get();
}
inline void VigoKey::_internal_set_x(const std::string& value) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoKey::set_x(std::string&& value) {
  
  x_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoKey.x)
}
inline void VigoKey::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoKey.x)
}
inline void VigoKey::set_x(const void* value,
    size_t size) {
  
  x_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoKey.x)
}
inline std::string* VigoKey::_internal_mutable_x() {
  
  return x_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoKey::release_x() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoKey.x)
  return x_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoKey::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoKey.x)
}

// -------------------------------------------------------------------

// VigoSignature

// bytes r = 1;
inline void VigoSignature::clear_r() {
  r_.ClearToEmpty();
}
inline const std::string& VigoSignature::r() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoSignature.r)
  return _internal_r();
}
inline void VigoSignature::set_r(const std::string& value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoSignature.r)
}
inline std::string* VigoSignature::mutable_r() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoSignature.r)
  return _internal_mutable_r();
}
inline const std::string& VigoSignature::_internal_r() const {
  return r_.Get();
}
inline void VigoSignature::_internal_set_r(const std::string& value) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoSignature::set_r(std::string&& value) {
  
  r_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoSignature.r)
}
inline void VigoSignature::set_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoSignature.r)
}
inline void VigoSignature::set_r(const void* value,
    size_t size) {
  
  r_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoSignature.r)
}
inline std::string* VigoSignature::_internal_mutable_r() {
  
  return r_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoSignature::release_r() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoSignature.r)
  return r_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoSignature::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoSignature.r)
}

// bytes s = 2;
inline void VigoSignature::clear_s() {
  s_.ClearToEmpty();
}
inline const std::string& VigoSignature::s() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoSignature.s)
  return _internal_s();
}
inline void VigoSignature::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoSignature.s)
}
inline std::string* VigoSignature::mutable_s() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoSignature.s)
  return _internal_mutable_s();
}
inline const std::string& VigoSignature::_internal_s() const {
  return s_.Get();
}
inline void VigoSignature::_internal_set_s(const std::string& value) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoSignature::set_s(std::string&& value) {
  
  s_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoSignature.s)
}
inline void VigoSignature::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoSignature.s)
}
inline void VigoSignature::set_s(const void* value,
    size_t size) {
  
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoSignature.s)
}
inline std::string* VigoSignature::_internal_mutable_s() {
  
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoSignature::release_s() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoSignature.s)
  return s_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoSignature::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoSignature.s)
}

// -------------------------------------------------------------------

// VigoSecret

// bytes material = 1;
inline void VigoSecret::clear_material() {
  material_.ClearToEmpty();
}
inline const std::string& VigoSecret::material() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoSecret.material)
  return _internal_material();
}
inline void VigoSecret::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoSecret.material)
}
inline std::string* VigoSecret::mutable_material() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoSecret.material)
  return _internal_mutable_material();
}
inline const std::string& VigoSecret::_internal_material() const {
  return material_.Get();
}
inline void VigoSecret::_internal_set_material(const std::string& value) {
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoSecret::set_material(std::string&& value) {
  
  material_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoSecret.material)
}
inline void VigoSecret::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoSecret.material)
}
inline void VigoSecret::set_material(const void* value,
    size_t size) {
  
  material_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoSecret.material)
}
inline std::string* VigoSecret::_internal_mutable_material() {
  
  return material_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoSecret::release_material() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoSecret.material)
  return material_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoSecret::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoSecret.material)
}

// bytes iv = 2;
inline void VigoSecret::clear_iv() {
  iv_.ClearToEmpty();
}
inline const std::string& VigoSecret::iv() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoSecret.iv)
  return _internal_iv();
}
inline void VigoSecret::set_iv(const std::string& value) {
  _internal_set_iv(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoSecret.iv)
}
inline std::string* VigoSecret::mutable_iv() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoSecret.iv)
  return _internal_mutable_iv();
}
inline const std::string& VigoSecret::_internal_iv() const {
  return iv_.Get();
}
inline void VigoSecret::_internal_set_iv(const std::string& value) {
  
  iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoSecret::set_iv(std::string&& value) {
  
  iv_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoSecret.iv)
}
inline void VigoSecret::set_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoSecret.iv)
}
inline void VigoSecret::set_iv(const void* value,
    size_t size) {
  
  iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoSecret.iv)
}
inline std::string* VigoSecret::_internal_mutable_iv() {
  
  return iv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoSecret::release_iv() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoSecret.iv)
  return iv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoSecret::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  iv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoSecret.iv)
}

// bytes tag = 3;
inline void VigoSecret::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& VigoSecret::tag() const {
  // @@protoc_insertion_point(field_get:nugget.app.keymaster.VigoSecret.tag)
  return _internal_tag();
}
inline void VigoSecret::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:nugget.app.keymaster.VigoSecret.tag)
}
inline std::string* VigoSecret::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:nugget.app.keymaster.VigoSecret.tag)
  return _internal_mutable_tag();
}
inline const std::string& VigoSecret::_internal_tag() const {
  return tag_.Get();
}
inline void VigoSecret::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VigoSecret::set_tag(std::string&& value) {
  
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nugget.app.keymaster.VigoSecret.tag)
}
inline void VigoSecret::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:nugget.app.keymaster.VigoSecret.tag)
}
inline void VigoSecret::set_tag(const void* value,
    size_t size) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nugget.app.keymaster.VigoSecret.tag)
}
inline std::string* VigoSecret::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VigoSecret::release_tag() {
  // @@protoc_insertion_point(field_release:nugget.app.keymaster.VigoSecret.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VigoSecret::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nugget.app.keymaster.VigoSecret.tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace keymaster
}  // namespace app
}  // namespace nugget

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nugget::app::keymaster::PresharedSecretStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nugget::app::keymaster::PresharedSecretStatus>() {
  return ::nugget::app::keymaster::PresharedSecretStatus_descriptor();
}
template <> struct is_proto_enum< ::nugget::app::keymaster::AttestationSelector> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nugget::app::keymaster::AttestationSelector>() {
  return ::nugget::app::keymaster::AttestationSelector_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nugget_2fapp_2fkeymaster_2fkeymaster_5ftypes_2eproto
